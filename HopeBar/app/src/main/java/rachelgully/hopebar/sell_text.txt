package qualcomm.hopebars;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.paypal.android.sdk.payments.PayPalAuthorization;
import com.paypal.android.sdk.payments.PayPalConfiguration;
import com.paypal.android.sdk.payments.PayPalFuturePaymentActivity;
import com.paypal.android.sdk.payments.PayPalPayment;
import com.paypal.android.sdk.payments.PayPalService;
import com.paypal.android.sdk.payments.PaymentActivity;
import com.paypal.android.sdk.payments.PaymentConfirmation;

import org.json.JSONException;
import org.json.JSONObject;

import java.math.BigDecimal;




public class Sell extends ActionBarActivity implements View.OnClickListener {

	private Button pay;

	private static final String CONFIG_ENVIRONMENT = PayPalConfiguration.ENVIRONMENT_SANDBOX;
	private static final String CONFIG_CLIENT_ID = "AVZEpnJQTuon_UivxJeORyHL6d8gmP0eePlDbBypEalKj2rUionkp43Ua8IQnvV15ZWz9kJzve4-iuRo";
	private static final int REQUEST_CODE_PAYMENT = 1;
	private static final int REQUEST_CODE_FUTURE_PAYMENT = 2;

	private static PayPalConfiguration config = new PayPalConfiguration()
		.environment(CONFIG_ENVIRONMENT)
		.clientId(CONFIG_CLIENT_ID);


	@Override
		protected void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			setContentView(R.layout.activity_sell);
			EditText no = (EditText)findViewById(R.id.no);
			TextView tbars = (TextView)findViewById(R.id.tbars);
			int tb;
			// tbars.setText();
			try{
				tb = Integer.parseInt(no.getText().toString())*30;
				Log.e("App","A"+tb);
			}
			catch(Exception e)
			{
				tb = 0;
			}
			tbars.setText("Price per share = $"+Float.toString(tb));
			pay = (Button)findViewById(R.id.pay);
			pay.setOnClickListener(Sell.this);
			Intent intent = new Intent(this, PayPalService.class);
			intent.putExtra(PayPalService.EXTRA_PAYPAL_CONFIGURATION,config);
			startService(intent);
		}


	@Override
		public boolean onCreateOptionsMenu(Menu menu) {
			// Inflate the menu; this adds items to the action bar if it is present.
			getMenuInflater().inflate(R.menu.menu_sell, menu);
			return true;
		}

	@Override
		public boolean onOptionsItemSelected(MenuItem item) {
			// Handle action bar item clicks here. The action bar will
			// automatically handle clicks on the Home/Up button, so long
			// as you specify a parent activity in AndroidManifest.xml.
			int id = item.getItemId();

			//noinspection SimplifiableIfStatement
			if (id == R.id.action_settings) {
				return true;
			}

			return super.onOptionsItemSelected(item);
		}
	public void onClick (View v) {
		switch (v.getId()) {
			case R.id.pay:
				PayPalPayment item = new PayPalPayment(new BigDecimal(1),"USD","emSquared",PayPalPayment.PAYMENT_INTENT_AUTHORIZE );
				Intent in =new Intent(Sell.this, PaymentActivity.class);
				in.putExtra(PaymentActivity.EXTRA_PAYMENT, item);
				startActivityForResult(in, REQUEST_CODE_PAYMENT);
				break;
		}
	}
	protected void onActivityResult(int requestCode,int resultCode,Intent data) {
		if (requestCode == REQUEST_CODE_PAYMENT) {
			if (resultCode == Activity.RESULT_OK) {
				PaymentConfirmation confirm = data.getParcelableExtra(PaymentActivity.EXTRA_RESULT_CONFIRMATION);
				if (confirm != null) {
					try {
						System.out.println("Responses" + confirm);
						Log.i("PayPal Example Payments", confirm.toJSONObject().toString(4));
						JSONObject obj = new JSONObject(confirm.toJSONObject().toString());
						String paymentID = obj.getJSONObject("response").getString("id");
						System.out.println("payment id:==" + paymentID);
					} catch (JSONException e) {
						Log.e("Payment Demo", "failure occured", e);
					}
				} else if (requestCode == Activity.RESULT_CANCELED) {
					Log.i("Payment Demo", "the user cancelled");
				} else if (resultCode == PaymentActivity.RESULT_EXTRAS_INVALID) {
					Log.i("paymentExample", "An invalid payment was submitted. Please see the docs.");
				}
			} else if (requestCode == REQUEST_CODE_FUTURE_PAYMENT)
			{
				if(resultCode == Activity.RESULT_OK)
				{
					PayPalAuthorization auth = data.getParcelableExtra(PayPalFuturePaymentActivity.EXTRA_RESULT_AUTHORIZATION);
					if(auth!=null)
					{
						try{
							Log.i("FuturePaymentExample", auth.toJSONObject().toString(4));
							String authorization_code = auth.getAuthorizationCode();
							sendAuthorizationToServer(auth);

						}catch (JSONException e){
							Log.e("FuturePaymentExample", "an extremely unlikely failure occurred: ", e);
						}
					}
				} else if (resultCode == Activity.RESULT_CANCELED) {
					Log.i("FuturePaymentExample", "The user canceled.");
				} else if (resultCode == PayPalFuturePaymentActivity.RESULT_EXTRAS_INVALID) {
					Log.i("FuturePaymentExample",
							"Probably the attempt to previously start the PayPalService had an invalid PayPalConfiguration. Please see the docs.");
				}
			}

		}

	}

	private void sendAuthorizationToServer(PayPalAuthorization authorization) {


		// Sene authorization response to your server, where it can exchange the authorization code
		// for OAuth access and refresh tokens.
		//
		// Your server must then store these tokens, so that your server code can execute payments
		// for this user in the future.

	}
	public void onFuturePaymentPurchasePressed(View pressed) {
		// Get the Application Correlation ID from the SDK
		String correlationId = PayPalConfiguration.getApplicationCorrelationId(this);

		Log.i("FuturePaymentExample", "Application Correlation ID: " + correlationId);

		// TODO: Send correlationId and transaction details to your server for processing with
		// PayPal...
		Toast.makeText(getApplicationContext(), "App Correlation ID received from SDK",
				Toast.LENGTH_LONG).show();
	}

}

